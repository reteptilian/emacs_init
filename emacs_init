; list the packages you want
(setq package-list '(jedi))

; list the repositories containing them
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))

; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

; install jedi server
(jedi:install-server)

(setq split-height-threshold 160)

;; python setup

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

(require 'python)

(defun my-shell-mode-hook ()
  (add-hook 'comint-output-filter-functions 'python-pdbtrack-comint-output-filter-function t))

(add-hook 'python-mode-hook 'my-shell-mode-hook)

(add-to-list 'load-path "~/.emacs.d/Pymacs")

;; don't use default keybindings from jedi.el; keep C-. free
 (setq jedi:setup-keys nil)
 (setq jedi:tooltip-method nil)
 (autoload 'jedi:setup "jedi" nil t)
 (add-hook 'python-mode-hook 'jedi:setup)

(defvar jedi:goto-stack '())
(defun jedi:jump-to-definition ()
  (interactive)
  (add-to-list 'jedi:goto-stack
               (list (buffer-name) (point)))
  (jedi:goto-definition))
(defun jedi:jump-back ()
  (interactive)
  (let ((p (pop jedi:goto-stack)))
    (if p (progn
            (switch-to-buffer (nth 0 p))
            (goto-char (nth 1 p))))))

;; redefine jedi's C-. (jedi:goto-definition)
;; to remember position, and set C-, to jump back
(add-hook 'python-mode-hook
          '(lambda ()
             (local-set-key "\C-c." 'jedi:jump-to-definition)
             (local-set-key "\C-c," 'jedi:jump-back)
             (local-set-key "\C-cd" 'jedi:show-doc)))



(require 'auto-complete)
(global-auto-complete-mode t)


(require 'whitespace)
(setq whitespace-line-column 120)
(setq whitespace-style '(face empty tabs lines-tail trailing))
(global-whitespace-mode t)



;;; turn on WhiteSpace
(require 'whitespace)

;;; Turn on ido-mode by default
(require 'ido)
(ido-mode t)

; spaces instead of tabs when indenting
(setq-default indent-tabs-mode nil)

;; use Shift+arrow_keys to move cursor around split panes
(windmove-default-keybindings)

;; when cursor is on edge, move to the other side, as in a toroidal space
(setq windmove-wrap-around t )

;; save time by firing up the shell now
(shell)

;; enable backup files
(setq make-backup-files t)

;; enable versioning with default values (keep five last versions)
(setq version-control t)

;; Save all backups in this directory
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))

;; uniquify buffer names
(require 'uniquify)
(setq
 uniquify-buffer-name-style 'post-forward
 uniquify-separator ":")
